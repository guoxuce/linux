1 mongodb简介
官网 https://www.mongodb.org/

MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。
在高负载的情况下，添加更多的节点，可以保证服务器性能。
MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。
MongoDB 将数据存储为一个文档，数据结构由键值(key=>value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。

和关系型数据库对比：
http://www.apelearn.com/bbs/data/attachment/forum/201510/19/172810njajznl07slfj3sj.jpg 
关系型数据库数据结构：
http://www.apelearn.com/bbs/data/attachment/forum/201510/19/172837vvtreitte9k5x446.jpg 
Mongodb数据结构
http://www.apelearn.com/bbs/data/attachment/forum/201510/19/172852rokzojh7t323douh.jpg  



使用yum安装的lanp环境进行的测试：
1.安装php扩展，mongodb服务端，mongodb客户：
yum install php-pecl-mongo mongodb mongodb-devel mongodb-server 

2.查看配置/etc/mongodb.conf（不用修改）
cat /etc/mongodb.conf

确保建立了目录：/var/lib/mongodb 
（没有的话要创建 mkdir -p /var/lib/mongodb）
所属主和所属组chown mongodb:mongodb -R /var/lib/mongodb/ 

3.启动mongodb服务端
/etc/init.d/mongod start //启动 

查看服务是否开启：netstat -tpnl|grep 27017 

4.测试php mongodb扩展
<?php 
$mongo = new Mongo(); 
$dbs = $mongo->listDBs(); 
print_r($dbs);



使用mongodb源安装
2 mongodb 安装
说明：目前3.0以上版本只提供64位的yum源
vim /etc/yum.repos.d/mongodb-org-3.0.repo
加入：
[mongodb-org-3.0]
name=MongoDB Repository
baseurl=http://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.0/x86_64/   
gpgcheck=0
enabled=1

然后安装：
yum install -y mongodb-org

配置文件：
vim /etc/mongod.conf // 有两行
fork: true
pidFilePath: /var/run/mongodb/mongod.pid
把这两行后面#开头的注释删掉
要想绑定多个ip，在bind_ip 后写多个ip，中间用逗号分隔，监听全部ip留空即可


启动：
启动之前，先做几个操作
echo never > /sys/kernel/mm/transparent_hugepage/enabled
echo never > /sys/kernel/mm/transparent_hugepage/defrag
vim /etc/security/limits.conf //加入
mongod soft nofile 64000
mongod hard nofile 64000
mongod soft nproc 32000
mongod hard nproc 32000

启动：service mongod start 
启动的过程会比较慢，这是它在写数据 /var/lib/mongo


3. mongodb使用
1）连接mongodb
mongo --port 10001 //指定port，默认port为27017，这样就连接了本地的mongodb了
mongo --host 192.168.0.11  //连接远程的mongodb
mongo -umyuser -p123456  //使用用户名密码登录

2） 用户管理
用户角色： http://bbs.51cto.com/thread-1146654-1.html

#创建用户      
db.createUser({user:"admin",pwd:"123456",roles:[{role:'dbOwner',db:'userdb'}]})
#查看用户
db.system.users.find()  //列出所有用户，需要切换到admin库下（use admin)
show users  //查看当前库下所有的用户
#删除用户，需要切换到admin库      
db.dropUser('admin')
要想使用账号和密码登陆需要先打开用户认证：  http://theadorelee.com/index.php/archives/60.html

3)数据库管理
#查看版本
db.version()
#显示当前的库   db
# 切换/创建库
use userdb  //如果库存在就切换，不存在就创建
#此时show dbs 看不到userdb，需要我们创建一个集合
db.createCollection('clo1')
再show dbs就有userdb了。
#查看所有数据库  
show dbs
#删除数据库 mydb
use mydb  //先切换到该库下，然后再删除
db.dropDatabase()

4）数据管理
创建集合
db.createCollection("mycol", { capped : true, autoIndexID : true, size : 6142800, max : 10000 } )

语法：db.createCollection(name,options)
name就是集合的名字，options可选，用来配置集合的参数，参数如下
capped true/false （可选）如果为true，则启用封顶集合。封顶集合是固定大小的集合，会自动覆盖最早的条目，当它达到其最大大小。如果指定true，则需要也指定尺寸参数。
autoindexID  true/false （可选）如果为true，自动创建索引,id字段的默认值是false。
size （可选）指定最大大小字节封顶集合。如果封顶如果是 true，那么你还需要指定这个字段。单位B
max （可选）指定封顶集合允许在文件的最大数量。

查看集合
show collections
在集合中添加文档
db.Account.insert({AccountID:2,UserName:"123",password:"123456"})  //如果集合不存在，直接插入数据，则mongodb会自动创建集合
修改
db.Account.update({AccountID:2},{"$set":{"Age":20}})
查看
db.Account.find()   //查看所有文档
db.Account.find({AccountID:2})   //根据条件查询
删除
db.Account.remove({AccountID:2})  //根据条件删除
要删除整个文档
db.Account.drop()
查看集合的状态
use dbname  //先进入对应的库，然后查看集合状态
db.printCollectionStats()

5）数据库性能
db.stats()  //查看当前库的信息
db.serverStatus()   //查看mongodb服务器的状态

4. Mongodb 主从配置 （官方不建议使用了）
两台机器：
mast: 192.168.31.112
slave:192.168.31.113
首先安装前面我们介绍的步骤安装好mongodb
主上编辑启动脚本
vim /etc/init.d/mongod  
把OPTIONS=" -f $CONFIGFILE"改为OPTIONS="--master -f $CONFIGFILE"
从上编辑启动脚本
vim /etc/init.d/mongod
把OPTIONS=" -f $CONFIGFILE"改为OPTIONS="--slave --source 172.7.15.111:27017 -f $CONFIGFILE"
分别重启主和从
测试：
在主上新建库，新建集合
>use  newdb
>db.createCollection('newcol')
>show dbs
从上查看
>show dbs
如果有报错
QUERY    Error: listDatabases failed:{ "note" : "from execCommand", "ok" : 0, "errmsg" : "not master" }
解决办法: 
>rs.slaveOk()
>show dbs;
发现有newdb库了


5. mongodb集群（replication）


1） 集群中有三个角色，一个主两个从
http://www.apelearn.com/bbs/data/attachment/forum/201510/19/172924ixvzwzvvzvvffvxk.png
  
2） 还可以增加一个角色arbiter（仲裁），它只负责仲裁，不会存储任何数据
http://www.apelearn.com/bbs/data/attachment/forum/201510/19/172932clanllzldq04ffbf.png

  
3） 坏掉主后，其中一个从会接管主的角色
http://www.apelearn.com/bbs/data/attachment/forum/201510/19/172941ri2cgi2uisu2iyu2.png
  
三台机器： 172.7.15.111（primary）   172.7.15.112（secondary)    172.7.15.101（secondary) 
编辑三台机器的配置文件，增加：
replication:
##oplog大小
oplogSizeMB: 20
##复制集名称
replSetName: aminglinux

分别重启后，连接primary机器
mongo 
>use admin
>config={_id:"aminglinux",members:[{_id:0,host:"172.7.15.111:27017"},{_id:1,host:"172.7.15.112:27017"},
        {_id:2,host:"172.7.15.101:27017"}]}
>rs.initiate(config)
>rs.add("172.7.15.112")
>rs.add("172.7.15.101")
查看状态：
>rs.status()
{
"set" : "aminglinux",
"date" : ISODate("2015-10-19T06:32:09.200Z"),
"myState" : 1,
"members" : [
{
"_id" : 0,
"name" : "localhost.localdomain:27017",
"health" : 1,
"state" : 1,
"stateStr" : "PRIMARY",
"uptime" : 1381,
"optime" : Timestamp(1445235074, 1),
"optimeDate" : ISODate("2015-10-19T06:11:14Z"),
"electionTime" : Timestamp(1445234949, 1),
"electionDate" : ISODate("2015-10-19T06:09:09Z"),
"configVersion" : 3,
"self" : true
},
{
"_id" : 1,
"name" : "172.7.15.112:27017",
"health" : 1,
"state" : 0,
"stateStr" : "STARTUP",
"uptime" : 1268,
"optime" : Timestamp(0, 0),
"optimeDate" : ISODate("1970-01-01T00:00:00Z"),
"lastHeartbeat" : ISODate("2015-10-19T06:32:07.764Z"),
"lastHeartbeatRecv" : ISODate("1970-01-01T00:00:00Z"),
"pingMs" : 1,
"configVersion" : -2
},
{
"_id" : 2,
"name" : "172.7.15.101:27017",
"health" : 1,
"state" : 0,
"stateStr" : "STARTUP",
"uptime" : 1255,
"optime" : Timestamp(0, 0),
"optimeDate" : ISODate("1970-01-01T00:00:00Z"),
"lastHeartbeat" : ISODate("2015-10-19T06:32:07.930Z"),
"lastHeartbeatRecv" : ISODate("1970-01-01T00:00:00Z"),
"pingMs" : 1,
"configVersion" : -2
}
],
"ok" : 1
}

这个状态是不对的，正常从节点上应该是SECONDARY，而不是STARTUP
解决该问题，需要在主节点执行
> var config={_id:"aminglinux",members:[{_id:0,host:"172.7.15.111:27017"},{_id:1,host:"172.7.15.112:27017"},
              {_id:2,host:"172.7.15.101:27017"}]}
>rs.reconfig(config)
再次执行
>rs.status() 
发现状态好了

测试：
主上建库，建集合
>use mydb
>db.acc.insert({AccountID:1,UserName:"123",password:"123456"})
>show tbs
>show tables

从上测试
>show dbs    //也出现mydb库了。

更改primary和secondary的权重，会引起主从切换
cfg = rs.conf()
cfg.members[0].priority = 1
cfg.members[1].priority = 2
cfg.members[2].priority = 1
rs.reconfig(cfg)
这样第二个机器会自动切换到主，权重最高的机器会担任主角色。
在生成环境中，我们需要找一个从节点作为自动切换节点，当主节点宕机后，它会自动接管主的服务，成为主节点，当主恢复后还会自动切换回原来的身份。
所以，我们应该这样配置:

cfg = rs.conf()
cfg.members[0].priority = 3
cfg.members[1].priority = 2
cfg.members[2].priority = 1
rs.reconfig(cfg)这样的话，第二个节点将会成为候选主节点。

6. mongodb 备份与恢复
1） 备份指定库
mongodump  -h ip -d dbname -o dir  //-h后面跟服务器ip，-d后面跟database名字，不加则备份所有库，-o后面指定备份到哪里

2）备份所有库
mongodump -h ip -o dir

3) 备份指定集合
mongodump -d mydb -c testc -o /tmp/testc   //用-c指定集合名字

4）恢复所有库
mongorestore  --drop dir/   //其中dir是备份所有库的目录名字，其中--drop可选，意思是当恢复之前先把之前的数据删除，不建议使用

5) 恢复指定库
mongorestore -d mydb dir/ //-d跟要恢复的库名字，dir就是该库备份时所在的目录

6）恢复集合
mongorestore -d mydb -c testc  dir/mydb/testc.bson  // -c后面跟要恢复的集合名字，dir是备份mydb库时生成文件所在路径，
                                                      这里需要跟一个bson文件的路径

7）导出集合为json文件
mongoexport -d mydb -c testc -o /tmp/testc.json

8）导入集合
mongoimport -d mydb -c testc --file /tmp/testc.json



7. php连接mongodb
wget 'https://codeload.github.com/mongodb/mongo-php-driver/zip/master' -O /usr/local/src/mong_php.zip
cd /usr/local/src/
unzip mong_php.zip
cd mongo-php-driver-master/
/usr/local/php/bin/phpize
./configure --with-php-config=/usr/local/php/bin/php-config
make
make install
vi /usr/local/php/etc/php.ini    //增加 extension = mongo.so
/usr/local/php/bin/php -m
重启apache，重新加载php

测试：
vi /usr/local/apache2/htdocs/1.php  //增加
<?php
// 连接到mongodb
$m = new MongoClient();
echo "Connection to database successfully";
// 选择一个数据库
$db = $m->mydb;
echo "Database mydb selected";
?>

访问  curl localhost/1.php   如果输出
Connection to database successfullyDatabase mydb selected
说明正确。

更多测试访问http://www.runoob.com/mongodb/mongodb-php.html
扩展： mongodb分片   http://www.lanceyan.com/tech/arch/mongodb_shard1.html
