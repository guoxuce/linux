一、安装
  sudo apt-get install git
二、设置用户（首次提交时会提示）
  git config --global user.name "Your Name"
  git config --global user.email "email@example.com"
三、创建版本库
  （1）创建目录
    mkdir gitdir
    cd gitdir
  （2）初始化
    git init
四、添加文件
  git add readme.git
  git commit -m 'wrote a readme file'
五、查看
  git status
  git diff readme.txt
六、版本控制
  git log
  git log --pretty=oneline
  git reflog (查看git所有命令)
  git reset --hard HEAD^(回退到上次提交的位置)
  git reset --hard HEAD~100（回退到前100次提交的位置）
  git reset --hard 3628164(版本号)
七、工作区和暂存区
  工作区：电脑里能看到的目录
  版本库：.git
    stage（或者叫index）的暂存区
    自动创建的第一个分支master
    指向master的一个指针叫HEAD
  添加文件时：
  第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
  第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
八、管理修改
  为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
  git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
九、撤销修改
  git checkout -- readme.txt
  git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
  git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。
十、删除文件
  git rm test.txt
  工作区删除后，使用该命令删除暂存区的文件
十一、远程仓库github
  使用ssh进行通信，创建秘钥对
  ssh-keygen -t rsa -C "youremail@example.com"
十一、关联远程仓库
  git remote add origin git@github.com:michaelliao/learngit.git
  git push -u origin master
  -u 第一次推送时，会把本地的master与远程master分支关联，之后不用；
  （远程仓库有文件时要先pull）
十二、克隆远程仓库
  git clone git@github.com:guoxuce/gittest.git
十三、分支
  HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
  查看分支：git branch
  创建分支：git branch <name>
  切换分支：git checkout <name>
  创建+切换分支：git checkout -b <name>
  合并某分支到当前分支：git merge <name>
  删除分支：git branch -d <name>
  当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
  用git log --graph命令可以看到分支合并图。
  Git分支十分强大，在团队开发中应该充分应用。
  合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
  而fast forward合并就看不出来曾经做过合并。
  修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
  当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
  开发一个新feature，最好新建一个分支；
  如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
十三、远程拉取
  查看远程库信息，使用git remote -v；
  本地新建的分支如果不推送到远程，对其他人就是不可见的；
  从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
  在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
  建立本地分支和远程分支的关联，使用git branch --set-upstream-to=origin/<branch> master；
  从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
十四、标签
  更方便更容易记录的标记而已
  命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
  git tag -a <tagname> -m "blablabla..."可以指定标签信息；
  git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
  命令git tag可以查看所有标签。
  git show <tagname> 查看相关标签信息
  命令git push origin <tagname>可以推送一个本地标签；
  命令git push origin --tags可以推送全部未推送过的本地标签；
  命令git tag -d <tagname>可以删除一个本地标签；
  命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
十五、忽略文件
  忽略某些文件时，需要编写.gitignore；
  .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
十六、git服务器
  搭建Git服务器非常简单，通常10分钟即可完成；
  要方便管理公钥，用Gitosis；
  要像SVN那样变态地控制权限，用Gitolite。


  
  
  
初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

多人协作
  多人协作的工作模式通常是这样：
  首先，可以试图用git push origin branch-name推送自己的修改；
  如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
  如果合并有冲突，则解决冲突，并在本地提交；
  没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
  如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
  
在GitHub上，可以任意Fork开源仓库；

自己拥有Fork后的仓库的读写权限；

可以推送pull request给官方仓库来贡献代码。

git可进行配置




注意：

某天突然IT部门告之服务器要换地址了，本地有clone出来的git厍，则需要修改一下origin的地址，以便能继续push和pull，
方法是，在命令行项目所在目录下执行： git remote set-url origin 新地址
